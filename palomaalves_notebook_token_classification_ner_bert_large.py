# -*- coding: utf-8 -*-
"""PalomaAlves_Notebook_token_classification_NER_BERT_large.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m6ezjsACJi5Bp63t6B3Upe8QDiv0uFgt

##Configuração
"""

task = "ner"  # Deve ser um dos valores: "ner", "pos" ou "chunk"

# Alteração: checkpoint do modelo large
model_checkpoint = "Palu1006/ner-bert-lenerbr-large-v1"

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# Instalar as dependências necessárias
!pip install datasets seqeval
!pip install -U accelerate
!pip install -U transformers
!apt install git-lfs

import transformers
print(transformers.__version__)

import datasets
print(datasets.__version__)

import pathlib
from pathlib import Path
import pandas as pd

from datasets import Dataset, DatasetDict

!pip install evaluate
from datasets import load_dataset

datasets = load_dataset("lener_br", trust_remote_code=True)
print(datasets)

print(datasets["train"][0])

print(datasets["train"].features[f"ner_tags"])

label_list = datasets["train"].features[f"{task}_tags"].feature.names
print(label_list)

from datasets import ClassLabel, Sequence
import random
import pandas as pd
from IPython.display import display, HTML

def show_random_elements(dataset, num_examples=10):
    assert num_examples <= len(dataset), "Can't pick more elements than there are in the dataset."
    picks = []
    for _ in range(num_examples):
        pick = random.randint(0, len(dataset)-1)
        while pick in picks:
            pick = random.randint(0, len(dataset)-1)
        picks.append(pick)

    df = pd.DataFrame(dataset[picks])
    for column, typ in dataset.features.items():
        if isinstance(typ, ClassLabel):
            df[column] = df[column].transform(lambda i: typ.names[i])
        elif isinstance(typ, Sequence) and isinstance(typ.feature, ClassLabel):
            df[column] = df[column].transform(lambda x: [typ.feature.names[i] for i in x])
    display(HTML(df.to_html()))

show_random_elements(datasets["train"])

# Pré-processando os dados
# =============================================================================
from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)
assert isinstance(tokenizer, transformers.PreTrainedTokenizerFast)

# Testes de tokenização
print(tokenizer("Hello, this is one sentence!"))
print(tokenizer(["Hello", ",", "this", "is", "one", "sentence", "split", "into", "words", "."], is_split_into_words=True))

example = datasets["train"][5]
print(example["tokens"])

tokenized_input = tokenizer(example["tokens"], is_split_into_words=True)
tokens = tokenizer.convert_ids_to_tokens(tokenized_input["input_ids"])
print(tokens)

print(len(example[f"{task}_tags"]), len(tokenized_input["input_ids"]))

print(tokenized_input.word_ids())

word_ids = tokenized_input.word_ids()
aligned_labels = [-100 if i is None else example[f"{task}_tags"][i] for i in word_ids]
print(len(aligned_labels), len(tokenized_input["input_ids"]))

label_all_tokens = True

def tokenize_and_align_labels(examples):
    tokenized_inputs = tokenizer(
        examples["tokens"],
        truncation=True,
        is_split_into_words=True,
        max_length=512,
        padding='max_length'
    )

    labels = []
    for i, label in enumerate(examples[f"{task}_tags"]):
        word_ids = tokenized_inputs.word_ids(batch_index=i)
        previous_word_idx = None
        label_ids = []
        for word_idx in word_ids:
            # Tokens especiais recebem -100 para serem ignorados na função de perda.
            if word_idx is None:
                label_ids.append(-100)
            # Primeiro token de cada palavra
            elif word_idx != previous_word_idx:
                label_ids.append(label[word_idx])
            else:
                label_ids.append(label[word_idx] if label_all_tokens else -100)
            previous_word_idx = word_idx
        labels.append(label_ids)

    tokenized_inputs["labels"] = labels
    return tokenized_inputs

# Aplicando a função de tokenização e alinhamento ao dataset
tokenized_datasets = datasets.map(tokenize_and_align_labels, batched=True)

# Ajustando o modelo
# =============================================================================
from transformers import AutoModelForTokenClassification, TrainingArguments, Trainer

model = AutoModelForTokenClassification.from_pretrained(
    model_checkpoint,
    num_labels=len(label_list),
    hidden_dropout_prob=0.1,
    attention_probs_dropout_prob=0.1,
)

model_name = model_checkpoint.split("/")[-1]

# Configuração dos hiperparâmetros e argumentos de treinamento
# =============================================================================
per_device_batch_size = 8
gradient_accumulation_steps = 4
learning_rate = 2e-5
num_train_epochs = 10
weight_decay = 0.01
fp16 = True

logging_steps = 290
logging_strategy = 'steps'
eval_steps = logging_steps

evaluation_strategy = 'epoch'
save_total_limit = 1
save_strategy = 'epoch'
save_steps = 978

load_best_model_at_end = True

model_name = model_checkpoint.split("/")[-1]
folder_model = 'e' + str(num_train_epochs) + '_lr' + str(learning_rate)

# Diretórios para armazenamento dos checkpoints e logs (ajuste conforme necessário)
output_dir = '/content/drive/MyDrive/' + 'ner-lenerbr-' + str(model_name) + '/checkpoints/' + folder_model
logging_dir = '/content/drive/MyDrive/' + 'ner-lenerbr-' + str(model_name) + '/logs/' + folder_model

# get best model through a metric
metric_for_best_model = 'eval_f1'
greater_is_better = True if metric_for_best_model == 'eval_f1' else False

training_args = TrainingArguments(
    output_dir=output_dir,
    learning_rate=learning_rate,
    per_device_train_batch_size=per_device_batch_size,
    per_device_eval_batch_size=per_device_batch_size * 2,
    gradient_accumulation_steps=gradient_accumulation_steps,
    num_train_epochs=num_train_epochs,
    save_total_limit=save_total_limit,
    logging_steps=logging_steps,
    eval_steps=logging_steps,
    load_best_model_at_end=False,  # Desabilitado para evitar conflito de estratégia
    metric_for_best_model=metric_for_best_model,
    greater_is_better=greater_is_better,
    gradient_checkpointing=False,
    do_train=True,
    do_eval=True,
    do_predict=True,
    logging_strategy=logging_strategy,
    logging_dir=logging_dir,
    save_steps=save_steps,
    fp16=fp16,
    push_to_hub=False,
    max_grad_norm=1.0,
    warmup_steps=500,
    weight_decay=0.01,
    fp16_full_eval=False,
    dataloader_num_workers=2,
    seed=42,
)

from transformers import DataCollatorForTokenClassification
data_collator = DataCollatorForTokenClassification(tokenizer)

import evaluate
metric = evaluate.load("seqeval")

labels = [label_list[i] for i in example[f"{task}_tags"]]
print(metric.compute(predictions=[labels], references=[labels]))

import numpy as np

def compute_metrics(p):
    predictions, labels = p
    predictions = np.argmax(predictions, axis=2)

    true_predictions = []
    true_labels = []

    for prediction, label in zip(predictions, labels):
        pred_list = []
        label_list_current = []

        for p_val, l_val in zip(prediction, label):
            if l_val != -100:
                try:
                    pred_list.append(label_list[p_val])
                    label_list_current.append(label_list[l_val])
                except IndexError:
                    continue

        if pred_list and label_list_current:
            true_predictions.append(pred_list)
            true_labels.append(label_list_current)

    if not true_predictions or not true_labels:
        return {
            "precision": 0.0,
            "recall": 0.0,
            "f1": 0.0,
            "accuracy": 0.0,
        }

    try:
        results = metric.compute(predictions=true_predictions, references=true_labels)
        return {
            "precision": float(results.get("overall_precision", 0.0) or 0.0),
            "recall": float(results.get("overall_recall", 0.0) or 0.0),
            "f1": float(results.get("overall_f1", 0.0) or 0.0),
            "accuracy": float(results.get("overall_accuracy", 0.0) or 0.0),
        }
    except Exception as e:
        print(f"Error computing metrics: {str(e)}")
        return {
            "precision": 0.0,
            "recall": 0.0,
            "f1": 0.0,
            "accuracy": 0.0,
        }

from transformers.trainer_callback import EarlyStoppingCallback

# espere early_stopping_patience x eval_steps antes de interromper o treinamento para obter um modelo melhor
early_stopping_patience = 5 #save_total_limit

trainer = Trainer(
    model,
    training_args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    data_collator=data_collator,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics,
)

trainer.train()

trainer.evaluate()

predictions, labels, _ = trainer.predict(tokenized_datasets["validation"])
predictions = np.argmax(predictions, axis=2)

# Remove ignored index (special tokens)
true_predictions = [
    [label_list[p] for (p, l) in zip(prediction, label) if l != -100]
    for prediction, label in zip(predictions, labels)
]
true_labels = [
    [label_list[l] for (p, l) in zip(prediction, label) if l != -100]
    for prediction, label in zip(predictions, labels)
]

results = metric.compute(predictions=true_predictions, references=true_labels)
results

"""##Test"""

predictions, labels, _ = trainer.predict(tokenized_datasets["test"])
predictions = np.argmax(predictions, axis=2)

# Remove ignored index (special tokens)
true_predictions = [
    [label_list[p] for (p, l) in zip(prediction, label) if l != -100]
    for prediction, label in zip(predictions, labels)
]
true_labels = [
    [label_list[l] for (p, l) in zip(prediction, label) if l != -100]
    for prediction, label in zip(predictions, labels)
]

results_test = metric.compute(predictions=true_predictions, references=true_labels)
results_test

model_dir = '/content/drive/MyDrive/' + 'ner-lenerbr-' + str(model_name) + '/model/'
trainer.save_model(model_dir)

"""FIM

"""