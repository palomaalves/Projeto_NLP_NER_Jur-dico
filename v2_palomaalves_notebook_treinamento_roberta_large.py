# -*- coding: utf-8 -*-
"""v2_PalomaAlves_Notebook_Treinamento_RoBERTa_large.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AhRtblCCDK0-k0zNLHFJKQppq9JMJRqX

# Treinamento do RoBERTa-Large no Dataset Lener_br e Upload do Modelo para o Hugging Face
"""

# =============================================================================
# Step 1: Environment Setup and Package Installation
# =============================================================================
!pip install --upgrade transformers
!pip install datasets evaluate accelerate huggingface_hub seqeval transformers[torch]

# =============================================================================
# Step 2: Importing Required Libraries
# =============================================================================
import numpy as np
import random
import pandas as pd
from IPython.display import display

from datasets import load_dataset
from transformers import (
    AutoTokenizer,
    AutoModelForTokenClassification,
    DataCollatorForTokenClassification,
    TrainingArguments,
    Trainer
)
import evaluate

from huggingface_hub import notebook_login
notebook_login()

# =============================================================================
# Step 3: Loading the LenerBr Dataset and Exploring Its Structure
# =============================================================================
dataset = load_dataset("lener_br", trust_remote_code=True)
print(dataset)

label_list = dataset["train"].features["ner_tags"].feature.names
num_labels = len(label_list)
print("Number of labels:", num_labels)
print("Label List:", label_list)

def show_random_elements(dataset, num_examples=5):
    picks = random.sample(range(len(dataset)), num_examples)
    df = pd.DataFrame(dataset[picks])
    for column, typ in dataset.features.items():
        if hasattr(typ, "feature") and hasattr(typ.feature, "names"):
            df[column] = df[column].apply(lambda x: [typ.feature.names[i] for i in x] if isinstance(x, list) else typ.feature.names[x])
    display(df)
# Para visualizar exemplos aleatórios, descomente a linha abaixo:
# show_random_elements(dataset["train"], num_examples=5)

# =============================================================================
# Step 4: Setting Up the Model Checkpoint and Tokenizer
# =============================================================================
model_checkpoint = "roberta-large"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint, add_prefix_space=True)

# =============================================================================
# Step 5: Preprocessing Function – Tokenization and Label Alignment
# =============================================================================
label_all_tokens = True

def tokenize_and_align_labels(examples):
    tokenized_inputs = tokenizer(
        examples["tokens"],
        truncation=True,
        is_split_into_words=True,
        max_length=512, # You can adjust this if needed
        padding="max_length"
    )
    all_labels = []
    for i, label in enumerate(examples["ner_tags"]):
        word_ids = tokenized_inputs.word_ids(batch_index=i)
        previous_word_idx = None
        label_ids = []
        for word_idx in word_ids:
            if word_idx is None:
                label_ids.append(-100)
            elif word_idx != previous_word_idx:
                label_ids.append(label[word_idx])
            else:
                label_ids.append(label[word_idx] if label_all_tokens else -100)
            previous_word_idx = word_idx
        all_labels.append(label_ids)
    tokenized_inputs["labels"] = all_labels
    return tokenized_inputs

tokenized_datasets = dataset.map(tokenize_and_align_labels, batched=True)

# =============================================================================
# Step 6: Model Initialization for Token Classification
# =============================================================================
model = AutoModelForTokenClassification.from_pretrained(
    model_checkpoint,
    num_labels=num_labels,
    hidden_dropout_prob=0.1,
    attention_probs_dropout_prob=0.1,
)

# =============================================================================
# Step 7: Data Collation
# =============================================================================
data_collator = DataCollatorForTokenClassification(tokenizer)

# =============================================================================
# Step 8: Defining the Evaluation Metric and Compute Metrics Function
# =============================================================================
metric = evaluate.load("seqeval")

def compute_metrics(p):
    predictions, labels = p
    predictions = np.argmax(predictions, axis=2)

    true_predictions = []
    true_labels = []

    for pred, label in zip(predictions, labels):
        pred_labels = []
        true_label = []
        for p_idx, l_idx in zip(pred, label):
            if l_idx != -100:
                pred_labels.append(label_list[p_idx])
                true_label.append(label_list[l_idx])
        true_predictions.append(pred_labels)
        true_labels.append(true_label)

    results = metric.compute(predictions=true_predictions, references=true_labels)
    return {
        "precision": results["overall_precision"],
        "recall": results["overall_recall"],
        "f1": results["overall_f1"],
        "accuracy": results["overall_accuracy"],
    }

# =============================================================================
# Step 9: Setting Up Training Arguments
# =============================================================================
training_args = TrainingArguments(
    output_dir="./ner-roberta-large-lenerbr-checkpoints", # Updated output directory
    eval_strategy="epoch",
    save_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=4,  # Adjust batch size if needed
    per_device_eval_batch_size=8,   # Adjust batch size if needed
    num_train_epochs=10,
    weight_decay=0.01,
    push_to_hub=True,
    hub_model_id="Palu1006/ner-roberta-large-lenerbr", # Replace with your desired Hub model ID
    hub_strategy="end",
    logging_dir="./logs",
    logging_steps=100,
    load_best_model_at_end=True,
    metric_for_best_model="f1",
    greater_is_better=True,
    fp16=True, # Enable mixed precision training if your hardware supports it
    seed=42,
)

# =============================================================================
# Step 10: Creating the Trainer Instance
# =============================================================================
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    tokenizer=tokenizer,
    data_collator=data_collator,
    compute_metrics=compute_metrics,
)

# =============================================================================
# Step 11: Training the Model
# =============================================================================
trainer.train()

# =============================================================================
# Step 12: Evaluating the Model
# =============================================================================
eval_results = trainer.evaluate()
print("Evaluation Results:", eval_results)

# =============================================================================
# Step 13: Pushing the Model to the Hugging Face Hub
# =============================================================================
trainer.push_to_hub()